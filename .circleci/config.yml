version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/project

jobs:
  deploy:
    executor: docker-executor
    environment:
      AWS_REGION: ap-south-1
      ECR_REGION: us-east-1
      AWS_ACCOUNT_ID: "528757813453"
      CLUSTER_NAME: "vamsi-cluster"
      SERVICE_NAME: "vamsi-task-service"
      TASK_DEFINITION_FAMILY: "vamsi-task"
      CONTAINER_NAME: "vamsi-repo"
      SUBNET_ID: "subnet-xxxxxx"
      SECURITY_GROUP_ID: "sg-xxxxxx"
      EXECUTION_ROLE_ARN: "arn:aws:iam::528757813453:role/ecsTaskExecutionRole"

    steps:
      - checkout

      - run:
          name: Install AWS CLI & Docker
          command: |
            sudo apt update
            sudo apt install -y awscli docker.io jq unzip
            sudo service docker start

      - run:
          name: Login to Amazon ECR Public
          command: |
            export REPOSITORY_URI="public.ecr.aws/z8i7v1n4/vamsi-repo"
            export IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c 1-7)
            echo "Image tag: $IMAGE_TAG"
            aws ecr-public get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin public.ecr.aws/z8i7v1n4

      - run:
          name: Build Docker Image
          command: |
            export REPOSITORY_URI="public.ecr.aws/z8i7v1n4/vamsi-repo"
            export IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c 1-7)
            docker build -t $REPOSITORY_URI:$IMAGE_TAG .
            docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

      - run:
          name: Push Docker Image to ECR
          command: |
            export REPOSITORY_URI="public.ecr.aws/z8i7v1n4/vamsi-repo"
            export IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c 1-7)
            docker push $REPOSITORY_URI:$IMAGE_TAG
            docker push $REPOSITORY_URI:latest

      - run:
          name: Register ECS Task Definition
          command: |
            export IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c 1-7)
            export REPOSITORY_URI="public.ecr.aws/z8i7v1n4/vamsi-repo"
            cat > taskdef.json <<EOF
            {
              "family": "$TASK_DEFINITION_FAMILY",
              "networkMode": "awsvpc",
              "executionRoleArn": "$EXECUTION_ROLE_ARN",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "containerDefinitions": [
                {
                  "name": "$CONTAINER_NAME",
                  "image": "$REPOSITORY_URI:$IMAGE_TAG",
                  "portMappings": [
                    {
                      "containerPort": 8080,
                      "protocol": "tcp"
                    }
                  ],
                  "essential": true
                }
              ]
            }
            EOF

            TASK_DEF_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://taskdef.json \
              --region $AWS_REGION \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

            echo "export TASK_DEF_ARN=$TASK_DEF_ARN" >> $BASH_ENV

      - run:
          name: Create ECS Cluster if not exists
          command: |
            CLUSTER_STATUS=$(aws ecs describe-clusters \
              --clusters $CLUSTER_NAME \
              --region $AWS_REGION \
              --query "clusters[0].status" \
              --output text || echo "INACTIVE")

            if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
              aws ecs create-cluster --cluster-name $CLUSTER_NAME --region $AWS_REGION
            fi

      - run:
          name: Create or Update ECS Service
          command: |
            source $BASH_ENV
            SERVICE_EXISTS=$(aws ecs describe-services \
              --cluster $CLUSTER_NAME \
              --services $SERVICE_NAME \
              --region $AWS_REGION \
              --query "services[0].status" \
              --output text || echo "MISSING")

            if [ "$SERVICE_EXISTS" = "ACTIVE" ]; then
              echo "Updating ECS Service..."
              aws ecs update-service \
                --cluster $CLUSTER_NAME \
                --service $SERVICE_NAME \
                --task-definition $TASK_DEF_ARN \
                --region $AWS_REGION
            else
              echo "Creating ECS Service..."
              aws ecs create-service \
                --cluster $CLUSTER_NAME \
                --service-name $SERVICE_NAME \
                --task-definition $TASK_DEF_ARN \
                --desired-count 1 \
                --launch-type FARGATE \
                --network-configuration "awsvpcConfiguration={subnets=[\"$SUBNET_ID\"],securityGroups=[\"$SECURITY_GROUP_ID\"],assignPublicIp=\"ENABLED\"}" \
                --region $AWS_REGION
            fi

workflows:
  version: 2
  deploy-to-ecs:
    jobs:
      - deploy
